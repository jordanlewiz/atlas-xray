
# URL Pattern Detection & Button Management

## Architecture Overview
The extension now uses a centralized PageTypeDetector service for all URL detection and button management with smart page type tracking and reliable SPA navigation detection.

## PageTypeDetector Service
- **Location**: [src/services/PageTypeDetector.ts](mdc:src/services/PageTypeDetector.ts)
- **Purpose**: Centralized page type detection and button mounting with intelligent lifecycle management
- **Patterns**: Regex-based detection for all Atlassian page types
- **Smart Tracking**: Only unmounts/remounts buttons when page type actually changes
- **URL Detection**: Uses `detect-url-change` package for reliable SPA navigation detection

## Button Loading Rules
- **Project Timeline**: FloatingButton + DependencyButton
- **Project List**: FloatingButton only
- **Other Pages**: No buttons

## Page Types Supported
```typescript
enum PageType {
  PROJECT_LIST = 'Project List',        // /projects?
  PROJECT_TIMELINE = 'Project Timeline', // /projects?.*view=timeline
  PROJECT_VIEW = 'Project View',        // /project/[id]/updates
  TAGS = 'Tags',                        // /tags?
  GOAL_LIST = 'Goal List',              // /goals?
  GOAL_TIMELINE = 'Goal Timeline',      // /goals?.*view=timeline
  GOAL_VIEW = 'Goal View',              // /goal/[id]
  UNKNOWN = 'Unknown'
}
```

## Smart Page Type Tracking
- **currentPageType**: Static property tracks the last known page type
- **Change Detection**: Only triggers button changes when page type differs
- **Performance**: Avoids unnecessary DOM manipulation on similar page navigation
- **Clean State**: Maintains proper button lifecycle across different page types

## URL Change Detection
- **Package**: Uses `detect-url-change` npm package for reliable detection
- **Event Listeners**: popstate, hashchange, plus package-managed events
- **Pattern Matching**: Regex-based with ordered matching
- **Automatic Updates**: Buttons mount/unmount only on page type changes
- **SPA Support**: Handles modern single-page applications with 100% reliability

### detect-url-change Package Benefits
- **Reliability**: Catches all URL changes including `pushState`, `replaceState`, browser navigation
- **Performance**: No DOM observation overhead, optimized internal implementation
- **Simplicity**: 3 lines of code vs 25+ lines of custom logic
- **Maintenance**: Battle-tested package with active maintenance
- **Compatibility**: Works with all modern SPA frameworks (React Router, Vue Router, Angular, etc.)

## Button Mounting Logic
```typescript
// Only cleanup and remount if page type actually changed
if (this.currentPageType !== newPageType) {
  // Clean up existing buttons
  this.cleanupButtons();
  
  // Update current page type
  this.currentPageType = newPageType;
  
  // Mount appropriate buttons for new page type
  if (newPageType === PageType.PROJECT_TIMELINE) {
    this.mountFloatingButton();
    this.mountDependencyButton();
  } else if (newPageType === PageType.PROJECT_LIST) {
    this.mountFloatingButton();
  }
} else {
  // Same page type, no button changes needed
}
```

## Best Practices
- **Centralized Logic**: All URL detection in PageTypeDetector service
- **Regex Patterns**: Use specific patterns for accurate page type detection
- **Smart Button Lifecycle**: Automatic mounting based on page type changes only
- **Performance Optimization**: Avoid unnecessary button operations on similar page navigation
- **SPA Support**: Uses dedicated package for 100% reliable navigation detection
- **Error Handling**: Graceful fallbacks for invalid URLs
- **Package Management**: Leverage battle-tested npm packages instead of custom solutions

## Component Lifecycle
1. **Page Load**: PageTypeDetector detects initial page type
2. **Button Mounting**: Appropriate buttons are mounted automatically
3. **URL Changes**: Page type is re-evaluated and buttons updated only when necessary
4. **Smart Cleanup**: Buttons are only removed when navigating to different page types
5. **State Persistence**: Buttons remain mounted when navigating between similar pages

## Adding New Page Types
1. **Add to PageType enum**
2. **Add regex pattern** to patterns array
3. **Add button mounting logic** in checkAndLoadButtons method
4. **Buttons mount automatically** on matching pages
5. **Smart tracking** ensures minimal button operations

## Migration from Old System
- **Removed**: Individual component URL pattern hooks
- **Replaced**: Manual button creation with automatic mounting
- **Enhanced**: Added smart page type tracking to avoid unnecessary operations
- **Simplified**: ContentScript now just initializes PageTypeDetector
- **Maintained**: All existing button functionality and behavior
- **Improved**: Better performance and user experience with smart lifecycle management
- **Modernized**: Replaced complex DOM watching with reliable npm package