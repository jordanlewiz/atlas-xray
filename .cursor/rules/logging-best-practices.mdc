
# Logging Best Practices

## Overview
This rule establishes logging standards and patterns for the Atlas Xray Chrome extension, ensuring consistent, performant, and maintainable logging using a **single, unified logger utility** with **file-level prefix control** and **override capability**.

## Core Principles

### 1. Use the Unified Logger Utility
Always use the single `log` utility from [src/utils/logger.ts](mdc:src/utils/logger.ts) for all logging purposes. This utility wraps browser console methods and respects the debug toggle.

```typescript
import { log, setFilePrefix } from '../utils/logger';

// Set file-level prefix for all logging in this file
setFilePrefix('[ServiceName]');

// Use the unified logger with automatic file prefix
log.debug('Debug message');
log.info('Info message');
log.warn('Warning message');
log.error('Error message');
```

### 2. File-Level Prefix Control
**Set the prefix once per file** using `setFilePrefix()`. This eliminates repetition and ensures consistent service identification.

```typescript
// At the top of each file, after imports
import { log, setFilePrefix } from '../utils/logger';

// Set prefix for this entire file
setFilePrefix('[PageTypeDetector]');

// Now all log calls automatically use this prefix
log.info('Pattern matched:', type);
log.debug('Testing pattern:', type, 'regex:', regex);
log.warn('No pattern matched, returning UNKNOWN');
```

### 3. Prefix Override Capability
**Override the file prefix when needed** by passing a custom prefix as the first parameter.

```typescript
// Use default file prefix
log.info('Button mounted successfully');

// Override with custom prefix for special context
log.info('[Validation]', 'Invalid URL format');
log.warn('[Cleanup]', 'Could not cleanup service');

// Override with no prefix for generic messages
log.info('', 'Generic system message');
```

### 4. Debug Toggle Integration
The logger automatically respects the debug toggle state:
- **Debug ON**: All logs appear (debug, info, warn, error)
- **Debug OFF**: Only errors appear (critical issues always visible)
- **Toggle updates immediately** - No caching issues

### 5. Log Level Usage

#### Debug (`log.debug`)
- Page type changes
- URL navigation events
- Button mounting/unmounting decisions
- Service state changes
- Pattern matching details
- Method entry/exit points

#### Information (`log.info`)
- Current state information
- Successful operations
- Component mounting/unmounting
- Service initialization success
- Button management completion
- URL changes

#### Warnings (`log.warn`)
- Non-critical failures
- Fallback operations
- Service cleanup issues
- Expected but suboptimal conditions
- Missing patterns or configurations

#### Errors (`log.error`)
- Critical failures
- Service mounting errors
- Unexpected exceptions
- Operations that prevent normal functionality
- Import failures

## Implementation Examples

### Service Class Template
```typescript
import { log, setFilePrefix } from '../utils/logger';

// Set file-level prefix once
setFilePrefix('[ExampleService]');

export class ExampleService {
  static async performOperation(): Promise<void> {
    try {
      log.debug('Starting operation...'); // Uses [ExampleService] prefix
      
      // ... operation logic ...
      
      log.info('Operation completed successfully'); // Uses [ExampleService] prefix
    } catch (error) {
      log.error('Operation failed', String(error)); // Uses [ExampleService] prefix
      throw error;
    }
  }
  
  static async specialOperation(): Promise<void> {
    try {
      // Override prefix for special context
      log.info('[SpecialContext]', 'Special operation started');
      
      // ... special logic ...
      
      log.info('[SpecialContext]', 'Special operation completed');
    } catch (error) {
      // Use default file prefix
      log.error('Special operation failed', String(error));
    }
  }
}
```

### Component Logging
```typescript
import { log, setFilePrefix } from '../utils/logger';

// Set file-level prefix once
setFilePrefix('[MyComponent]');

function MyComponent() {
  useEffect(() => {
    log.info('Component mounted'); // Uses [MyComponent] prefix
    
    return () => {
      log.info('Component unmounting'); // Uses [MyComponent] prefix
    };
  }, []);
  
  // ... component logic ...
}
```

## Environment Control

### Debug Toggle Control
Users can toggle debug logging through the extension popup:
- **Debug ON**: Sets `localStorage['atlas-xray-debug'] = 'true'` - shows all logs
- **Debug OFF**: Sets `localStorage['atlas-xray-debug'] = 'false'` - shows only errors

### Runtime Control
```typescript
import { forceDebugLogging, getDebugState } from '../utils/logger';

// Force enable/disable debug logging
forceDebugLogging(true);  // Enable all logs
forceDebugLogging(false); // Disable all logs except errors

// Check current debug state
console.log('Debug enabled:', getDebugState());
```

## Performance Benefits

### Zero Overhead When Disabled
- No function calls when debug toggle is OFF
- No string concatenation overhead
- No conditional checks at runtime
- Production builds are completely clean

### Immediate Response
- Debug toggle changes take effect immediately
- No caching issues
- Dynamic control without restarting

### Lightweight Implementation
- No external npm packages
- Native browser console wrapper
- Minimal memory footprint

## Best Practices

### 1. Always Set File-Level Prefix
```typescript
// ‚úÖ Good - set prefix once at file top
import { log, setFilePrefix } from '../utils/logger';
setFilePrefix('[PageTypeDetector]');

// Now use simple logging calls
log.info('Button mounted for page type:', pageType, 'at URL:', url);

// ‚ùå Bad - no file prefix set
import { log } from '../utils/logger';
log.info('Button mounted for page type:', pageType, 'at URL:', url);
```

### 2. Use Override Prefixes for Special Context
```typescript
// ‚úÖ Good - override prefix for special operations
log.info('[Validation]', 'URL validation failed:', url);
log.warn('[Cleanup]', 'Could not cleanup service:', serviceName);

// ‚úÖ Good - use default file prefix for normal operations
log.info('Pattern matched:', type);
log.debug('Testing pattern:', type, 'regex:', regex);
```

### 3. Include Relevant Context
```typescript
// ‚úÖ Good - includes relevant data
log.info('Skipping mount - button already exists for:', pageType);

// ‚ùå Bad - lacks context
log.info('Skipping mount');
```

### 4. Use Appropriate Log Levels
```typescript
// ‚úÖ Good - debug for detailed flow
log.debug('Testing pattern:', type, 'regex:', regex);

// ‚úÖ Good - info for successful operations
log.info('Pattern matched:', type);

// ‚úÖ Good - warn for non-critical issues
log.warn('No pattern matched, returning UNKNOWN');

// ‚úÖ Good - error for failures
log.error('Failed to mount button:', String(error));
```

### 5. Use Emojis for Visual Clarity
```typescript
// ‚úÖ Good - visual indicators with automatic file prefix
log.info('üöÄ Page type monitoring started');
log.debug('üîÑ URL changed to:', newUrl);
log.warn('‚ö†Ô∏è Could not cleanup service');
log.error('‚ùå Failed to mount component');
```

## Migration Guide

### From Console.log
```typescript
// Before
console.log('[Service] Operation started');

// After
import { log, setFilePrefix } from '../utils/logger';
setFilePrefix('[Service]');
log.info('Operation started');
```

### From Multiple Logger Instances
```typescript
// Before
const log = createLogger('ServiceName');
log.info('Operation started');

// After
import { log, setFilePrefix } from '../utils/logger';
setFilePrefix('[ServiceName]');
log.info('Operation started');
```

### From Manual Prefixes Everywhere
```typescript
// Before
log.info('[PageTypeDetector]', 'Pattern matched:', type);
log.debug('[PageTypeDetector]', 'Testing pattern:', type, 'regex:', regex);
log.warn('[PageTypeDetector]', 'No pattern matched, returning UNKNOWN');

// After
import { log, setFilePrefix } from '../utils/logger';
setFilePrefix('[PageTypeDetector]');

log.info('Pattern matched:', type);
log.debug('Testing pattern:', type, 'regex:', regex);
log.warn('No pattern matched, returning UNKNOWN');
```

## File References

- [src/utils/logger.ts](mdc:src/utils/logger.ts) - Unified logger utility with file-level prefix control
- [src/services/PageTypeDetector.ts](mdc:src/services/PageTypeDetector.ts) - Example implementation with file-level prefix
- [src/contentScripts/contentScript.js](mdc:src/contentScripts/contentScript.js) - Debug toggle integration with file-level prefix
- [src/components/ChromeExtension/ChromeExtensionPopup.tsx](mdc:src/components/ChromeExtension/ChromeExtensionPopup.tsx) - Debug toggle UI
- [package.json](mdc:package.json) - No external logging dependencies

## Related Rules

- [Chrome Extension General](mdc:chrome-extension-general) - Extension-specific patterns
- [Chrome Extension Patterns](mdc:chrome-extension-patterns) - Architecture guidelines
