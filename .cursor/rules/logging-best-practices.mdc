
# Logging Best Practices

## Overview
This rule establishes logging standards and patterns for the Atlas Xray Chrome extension, ensuring consistent, performant, and maintainable logging across all services and components using the **Loglevel** package.

## Core Principles

### 1. Use the Loglevel Package
Always use the [loglevel](https://www.npmjs.com/package/loglevel) package for conditional logging instead of custom console.log implementations.

```typescript
import { createLogger } from '../utils/logger';

export class MyService {
  // Create logger instance for this service
  private static readonly log = createLogger('MyService');
}
```

### 2. Logger Factory Function
Use the centralized `createLogger` function from [src/utils/logger.ts](mdc:src/utils/logger.ts) for consistent logging across all services.

```typescript
import { createLogger, setGlobalLogLevel } from '../utils/logger';

// Create service-specific logger
const log = createLogger('MyService');

// Set global log level (when needed)
setGlobalLogLevel('debug'); // 'trace', 'debug', 'info', 'warn', 'error', 'silent'
```

### 3. Log Level Usage

#### Debug (`log.debug`)
- Page type changes
- URL navigation events
- Button mounting/unmounting decisions
- Service state changes
- Pattern matching details
- Method entry/exit points

#### Information (`log.info`)
- Current state information
- Successful operations
- Component mounting/unmounting
- Service initialization success
- Button management completion
- URL changes

#### Warnings (`log.warn`)
- Non-critical failures
- Fallback operations
- Service cleanup issues
- Expected but suboptimal conditions
- Missing patterns or configurations

#### Errors (`log.error`)
- Critical failures
- Service mounting errors
- Unexpected exceptions
- Operations that prevent normal functionality
- Import failures

## Implementation Examples

### Service Class Template
```typescript
import { createLogger } from '../utils/logger';

export class ExampleService {
  // Logger instance
  private static readonly log = createLogger('ExampleService');

  static async performOperation(): Promise<void> {
    try {
      this.log.debug('Starting operation...');
      
      // ... operation logic ...
      
      this.log.info('Operation completed successfully');
    } catch (error) {
      this.log.error('Operation failed', error);
      throw error;
    }
  }
}
```

### Component Logging
```typescript
import { createLogger } from '../utils/logger';

const log = createLogger('ComponentName');

function MyComponent() {
  useEffect(() => {
    log.info('Component mounted');
    
    return () => {
      log.info('Component unmounting');
    };
  }, []);
  
  // ... component logic ...
}
```

## Environment Control

### Runtime Log Level Control
The Loglevel package provides immediate runtime control over log levels:

```typescript
import { setGlobalLogLevel, getGlobalLogLevel } from '../utils/logger';

// Enable all logs
setGlobalLogLevel('debug');

// Only show warnings and errors
setGlobalLogLevel('warn');

// Disable all logs
setGlobalLogLevel('silent');

// Check current level
console.log('Current log level:', getGlobalLogLevel());
```

### Chrome Extension Popup Control
Users can toggle debug logging through the extension popup:
- **Debug ON**: Sets log level to 'debug' - shows all logs
- **Debug OFF**: Sets log level to 'warn' - shows only warnings and errors

## Performance Benefits

### Zero Overhead When Disabled
- No function calls when log level is set to 'silent'
- No string concatenation overhead
- No conditional checks at runtime
- Production builds are completely clean

### Immediate Response
- Log level changes take effect immediately
- No caching issues (unlike the old debug package)
- Dynamic control without restarting

## Best Practices

### 1. Always Use Structured Logging
```typescript
// ‚úÖ Good - structured with context
this.log.info('Button mounted for page type:', pageType, 'at URL:', url);

// ‚ùå Bad - unstructured
console.log('Button mounted');
```

### 2. Include Relevant Context
```typescript
// ‚úÖ Good - includes relevant data
this.log.info('Skipping mount - button already exists for:', pageType);

// ‚ùå Bad - lacks context
this.log.info('Skipping mount');
```

### 3. Use Appropriate Log Levels
```typescript
// ‚úÖ Good - debug for detailed flow
this.log.debug('Testing pattern:', type, 'regex:', regex);

// ‚úÖ Good - info for successful operations
this.log.info('Pattern matched:', type);

// ‚úÖ Good - warn for non-critical issues
this.log.warn('No pattern matched, returning UNKNOWN');

// ‚úÖ Good - error for failures
this.log.error('Failed to mount button:', error);
```

### 4. Avoid Sensitive Information
```typescript
// ‚úÖ Good - no sensitive data
this.log.info('User action performed on project:', projectId);

// ‚ùå Bad - includes sensitive data
this.log.info('User action performed by:', user.email, 'on project:', projectId);
```

### 5. Use Emojis for Visual Clarity
```typescript
// ‚úÖ Good - visual indicators
this.log.info('üöÄ Page type monitoring started');
this.log.debug('üîÑ URL changed to:', newUrl);
this.log.warn('‚ö†Ô∏è Could not cleanup service');
this.log.error('‚ùå Failed to mount component');
```

## Migration Guide

### From Console.log
```typescript
// Before
console.log('[Service] Operation started');

// After
this.log.info('Operation started');
```

### From Debug Package
```typescript
// Before
import debug from 'debug';
const log = debug('atlas-xray:ServiceName');
log('Debug message');

// After
import { createLogger } from '../utils/logger';
const log = createLogger('ServiceName');
log.debug('Debug message');
```

### From Multiple Console Methods
```typescript
// Before
console.log('Info message');
console.warn('Warning message');
console.error('Error message');

// After
this.log.info('Info message');
this.log.warn('Warning message');
this.log.error('Error message');
```

## File References

- [src/utils/logger.ts](mdc:src/utils/logger.ts) - Centralized logger utility
- [src/services/PageTypeDetector.ts](mdc:src/services/PageTypeDetector.ts) - Example implementation
- [src/contentScripts/contentScript.js](mdc:src/contentScripts/contentScript.js) - Debug toggle integration
- [src/components/ChromeExtension/ChromeExtensionPopup.tsx](mdc:src/components/ChromeExtension/ChromeExtensionPopup.tsx) - Debug toggle UI
- [package.json](mdc:package.json) - Loglevel package dependency

## Related Rules

- [Chrome Extension General](mdc:chrome-extension-general) - Extension-specific patterns
- [Chrome Extension Patterns](mdc:chrome-extension-patterns) - Architecture guidelines

- [Chrome Extension General](mdc:chrome-extension-general) - Extension-specific patterns
- [Chrome Extension Patterns](mdc:chrome-extension-patterns) - Architecture guidelines
